// src/app/api/simple-fix/route.ts - –û–ø—Ä–æ—Å—Ç–µ–Ω–∞ –ø–æ–ø—Ä–∞–≤–∫–∞ –±–µ–∑ bulk –æ–ø–µ—Ä–∞—Ü–∏–∏
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { pipeline } from '@xenova/transformers';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!, 
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

let pipelineInstance: any = null;

async function getPipeline() {
  if (!pipelineInstance) {
    console.log('üì¶ Loading AI model...');
    pipelineInstance = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');
    console.log('‚úÖ AI model loaded successfully!');
  }
  return pipelineInstance;
}

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { business_id } = body;

    console.log('üîß Starting simple embedding fix...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–π –º–æ–¥–µ–ª–∞
    const pipe = await getPipeline();

    let businessesToProcess;

    if (business_id) {
      // –û–±—Ä–∞–±–æ—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –±–∏–∑–Ω–µ—Å
      const { data: business, error } = await supabase
        .from('businesses')
        .select('id, name, description, custom_fields')
        .eq('id', business_id)
        .single();

      if (error) throw error;
      if (!business) {
        return NextResponse.json({ error: 'Business not found' }, { status: 404 });
      }

      businessesToProcess = [business];
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∏ –≤—Å–∏—á–∫–∏ –±–∏–∑–Ω–µ—Å–∏
      const { data: businesses, error } = await supabase
        .from('businesses')
        .select('id, name, description, custom_fields')
        .limit(5); // –û–≥—Ä–∞–Ω–∏—á–∏ –¥–æ 5 –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ

      if (error) throw error;
      businessesToProcess = businesses || [];
    }

    if (businessesToProcess.length === 0) {
      return NextResponse.json({
        message: 'No businesses to process',
        processed: 0
      });
    }

    console.log(`üìä Processing ${businessesToProcess.length} businesses`);

    let processed = 0;
    let errors = 0;
    const results = [];

    // –û–±—Ä–∞–±–æ—Ç–∏ –≤—Å–∏—á–∫–∏ –±–∏–∑–Ω–µ—Å–∏
    for (const business of businessesToProcess) {
      try {
        console.log(`\nüîÑ Processing: ${business.name}`);

        // –°—ä–∑–¥–∞–π –∫–æ–º–±–∏–Ω–∏—Ä–∞–Ω —Ç–µ–∫—Å—Ç –∑–∞ embedding
        const content = [
          `–ò–º–µ: ${business.name}`,
          business.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${business.description}` : '',
          business.custom_fields ? `–£—Å–ª—É–≥–∏: ${JSON.stringify(business.custom_fields)}` : ''
        ].filter(Boolean).join('. ');

        console.log(`üìù Content: ${content.substring(0, 100)}...`);

        // –ì–µ–Ω–µ—Ä–∏—Ä–∞–π embedding
        const output = await pipe(content, { pooling: 'mean', normalize: true });
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–π –ø—Ä–∞–≤–∏–ª–Ω–æ –≤—ä–≤ Float32Array –∏ –ø–æ—Å–ª–µ –≤ –æ–±–∏–∫–Ω–æ–≤–µ–Ω –º–∞—Å–∏–≤
        let embedding: number[];
        
        if (output.data instanceof Float32Array) {
          embedding = Array.from(output.data);
        } else if (Array.isArray(output.data)) {
          embedding = output.data.map((val: any) => Number(val));
        } else {
          embedding = Array.from(output.data).map((val: any) => Number(val));
        }

        console.log(`üß† Generated embedding:`, {
          length: embedding.length,
          type: typeof embedding,
          isArray: Array.isArray(embedding),
          sample: embedding.slice(0, 3).map((v: number) => v.toFixed(6))
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!Array.isArray(embedding) || embedding.length !== 384) {
          throw new Error(`Invalid embedding format: length=${embedding.length}`);
        }

        const validEmbedding = embedding.every((val: number) => typeof val === 'number' && isFinite(val));
        if (!validEmbedding) {
          throw new Error(`Invalid embedding values`);
        }

        // –ó–∞–ø–∞–∑–∏ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏ —Å WHERE –∫–ª–∞—É–∑–∞
        const { error: updateError } = await supabase
          .from('businesses')
          .update({ 
            embedding: embedding // –ö–∞—Ç–æ —á–∏—Å–ª–æ –º–∞—Å–∏–≤
          })
          .eq('id', business.id); // WHERE –∫–ª–∞—É–∑–∞

        if (updateError) {
          console.error(`‚ùå Error saving ${business.name}:`, updateError);
          errors++;
          results.push({
            id: business.id,
            name: business.name,
            status: 'error',
            error: updateError.message
          });
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—á–µ—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ
        const { data: checkData } = await supabase
          .from('businesses')
          .select('embedding')
          .eq('id', business.id)
          .single();

        const savedEmbedding = checkData?.embedding;
        console.log(`‚úÖ Verified saved embedding:`, {
          length: savedEmbedding?.length,
          type: typeof savedEmbedding,
          isArray: Array.isArray(savedEmbedding)
        });

        processed++;
        results.push({
          id: business.id,
          name: business.name,
          status: 'success',
          embedding_length: embedding.length,
          saved_length: savedEmbedding?.length
        });

        // –ú–∞–ª–∫–∞ –ø–∞—É–∑–∞
        await new Promise(resolve => setTimeout(resolve, 200));

      } catch (businessError: any) {
        console.error(`‚ùå Error processing ${business.name}:`, businessError);
        errors++;
        results.push({
          id: business.id,
          name: business.name,
          status: 'error',
          error: businessError.message
        });
      }
    }

    console.log('\nüéâ Simple embedding fix completed!');

    return NextResponse.json({
      message: 'Simple embedding fix completed',
      processed,
      errors,
      total: businessesToProcess.length,
      results
    });

  } catch (error: any) {
    console.error('üí• General error:', error);
    
    return NextResponse.json({ 
      error: error.message || 'Error fixing embeddings',
      details: error.toString()
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Simple Embedding Fix API',
    description: 'Regenerates embeddings for businesses with proper format',
    usage: {
      fix_all: 'POST with {}',
      fix_one: 'POST with {"business_id": 123}'
    }
  });
}