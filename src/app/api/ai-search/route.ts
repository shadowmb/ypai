// src/app/api/ai-search-improved/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { pipeline } from '@xenova/transformers';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!, 
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

let pipelineInstance: any = null;

async function getPipeline() {
  if (!pipelineInstance) {
    console.log('üì¶ Loading AI model...');
    pipelineInstance = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');
    console.log('‚úÖ AI model loaded!');
  }
  return pipelineInstance;
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–∏ –∫–ª—é—á–æ–≤–∏ –¥—É–º–∏ –∑–∞ pre-filtering
const CATEGORY_KEYWORDS: Record<string, string[]> = {
  '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç', '—Ö—Ä–∞–Ω–∞', '—è—Å—Ç–∏–µ', '–∫—É—Ö–Ω—è', '–º–µ–Ω—é', '–ø–∏—Ü–∞—Ä–∏—è', '–±–∞—Ä', '–∫–∞—Ñ–µ', '–º–æ—Ä—Å–∫–∞ —Ö—Ä–∞–Ω–∞', '–º–µ—Å–æ', '–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏', '–ø–∏—Ü–∞', '–ø–∞—Å—Ç–∞'],
  '—Ö–æ—Ç–µ–ª–∏': ['—Ö–æ—Ç–µ–ª', '–Ω–∞—Å—Ç–∞–Ω—è–≤–∞–Ω–µ', '—Å—Ç–∞—è', '—Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è', '–ø–æ—á–∏–≤–∫–∞', '–Ω–æ—â—É–≤–∫–∞', '–±–∞—Å–µ–π–Ω', '–°–ü–ê', 'All Inclusive'],
  '–∫—Ä–∞—Å–æ—Ç–∞': ['—Ñ—Ä–∏–∑—å–æ—Ä', '–∫—Ä–∞—Å–æ—Ç–∞', '–∫–æ—Å–º–∏', '–ø—Ä–∏—á–µ—Å–∫–∞', '–±–æ—è–¥–∏—Å–≤–∞–Ω–µ', '–º–∞–Ω–∏–∫—é—Ä', '–ø–µ–¥–∏–∫—é—Ä', 'SPA', '–º–∞—Å–∞–∂'],
  '–º–µ–¥–∏—Ü–∏–Ω–∞': ['–ª–µ–∫–∞—Ä', '–¥–µ–Ω—Ç–∞–ª–µ–Ω', '–∑—ä–±–æ–ª–µ–∫–∞—Ä', '–∑–¥—Ä–∞–≤–µ', '–ª–µ—á–µ–Ω–∏–µ', '—Ç–µ—Ä–∞–ø–∏—è', '–±–æ–ª–Ω–∏—Ü–∞', '–∫–ª–∏–Ω–∏–∫–∞', '–∑—ä–±'],
  '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏': ['–∞–≤—Ç–æ–º–æ–±–∏–ª', '–∫–æ–ª–∞', '—Å–µ—Ä–≤–∏–∑', '—Ä–µ–º–æ–Ω—Ç', '–≥—É–º–∏', '–º–∞—Å–ª–∞', 'BMW', 'Mercedes', '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏–∑', '–º–æ—Ç–æ—Ä'],
  '–¥—Ä—É–≥–∏': []
};

function detectQueryCategory(query: string): string[] {
  const queryLower = query.toLowerCase();
  const categoryScores: Record<string, number> = {};
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–π scores
  for (const category of Object.keys(CATEGORY_KEYWORDS)) {
    categoryScores[category] = 0;
  }
  
  // –ò–∑—á–∏—Å–ª–∏ scores –∑–∞ –≤—Å—è–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  for (const [category, keywords] of Object.entries(CATEGORY_KEYWORDS)) {
    for (const keyword of keywords) {
      if (queryLower.includes(keyword.toLowerCase())) {
        categoryScores[category] += 1;
        
        // –ë–æ–Ω—É—Å —Ç–æ—á–∫–∏ –∑–∞ —Ç–æ—á–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ —Ü—è–ª–∞—Ç–∞ –¥—É–º–∞
        const regex = new RegExp(`\\b${keyword.toLowerCase()}\\b`);
        if (regex.test(queryLower)) {
          categoryScores[category] += 2;
        }
      }
    }
  }
  
  // –ù–∞–º–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ —Å –Ω–∞–π-–≤–∏—Å–æ–∫ score
  const maxScore = Math.max(...Object.values(categoryScores));
  const topCategories = Object.entries(categoryScores)
    .filter(([_, score]) => score > 0 && score >= maxScore * 0.7) // –¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç 70%
    .map(([category, _]) => category);
  
  console.log(`üìä Category scores:`, categoryScores);
  console.log(`üèÜ Top categories:`, topCategories);
  
  return topCategories;
}

function shouldIncludeBusiness(business: any, detectedCategories: string[]): boolean {
  if (detectedCategories.length === 0) return true; // –ê–∫–æ –Ω—è–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–∫–ª—é—á–∏ –≤—Å–∏—á–∫–∏
  
  const businessCategory = business.category?.name?.toLowerCase() || '';
  const businessName = business.name.toLowerCase();
  const businessDescription = business.description.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –¥–∏—Ä–µ–∫—Ç–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω–æ —Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
  for (const category of detectedCategories) {
    // –î–∏—Ä–µ–∫—Ç–Ω–æ —Å—ä–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ç–∞ –æ—Ç –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
    if (category === '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏' && businessCategory.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç')) return true;
    if (category === '—Ö–æ—Ç–µ–ª–∏' && businessCategory.includes('—Ö–æ—Ç–µ–ª')) return true;
    if (category === '–∫—Ä–∞—Å–æ—Ç–∞' && (businessCategory.includes('–∫—Ä–∞—Å–æ—Ç–∞') || businessCategory.includes('—Ñ—Ä–∏–∑—å–æ—Ä'))) return true;
    if (category === '–º–µ–¥–∏—Ü–∏–Ω–∞' && (businessCategory.includes('–º–µ–¥–∏—Ü–∏–Ω') || businessCategory.includes('–¥–µ–Ω—Ç–∞–ª'))) return true;
    if (category === '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏' && (businessCategory.includes('–∞–≤—Ç–æ–º–æ–±–∏–ª') || businessCategory.includes('—Å–µ—Ä–≤–∏–∑'))) return true;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ—Ç–æ –∏ –∏–º–µ—Ç–æ —Å–∞–º–æ –∑–∞ —Å–∏–ª–Ω–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
    const keywords = CATEGORY_KEYWORDS[category] || [];
    const strongKeywords = keywords.filter(k => k.length > 4); // –°–∞–º–æ –¥—ä–ª–≥–∏ –¥—É–º–∏
    
    const hasStrongMatch = strongKeywords.some(keyword => {
      const keywordLower = keyword.toLowerCase();
      return businessName.includes(keywordLower) || 
             businessDescription.includes(keywordLower);
    });
    
    if (hasStrongMatch) return true;
  }
  
  return false;
}

export async function POST(req: NextRequest) {
  console.log('\nüöÄ Improved AI Search API called');
  
  try {
    const body = await req.json();
    const { 
      query, 
      threshold = 0.3, 
      limit = 10,
      business_name,
      category_id 
    } = body;

    if (!query || typeof query !== 'string' || query.trim().length === 0) {
      return NextResponse.json({ 
        error: 'Valid query is required' 
      }, { status: 400 });
    }

    console.log(`üîé Processing improved search for: "${query}"`);
    
    // 1. –î–µ—Ç–µ–∫—Ç–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç –∑–∞—è–≤–∫–∞—Ç–∞
    const detectedCategories = detectQueryCategory(query);
    console.log(`üìÇ Detected categories: ${detectedCategories.join(', ') || 'none'}`);

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä–∞–π embedding –∑–∞ –∑–∞—è–≤–∫–∞—Ç–∞
    const pipe = await getPipeline();
    const output = await pipe(query, { pooling: 'mean', normalize: true });
    const query_embedding = Array.from(output.data);
    
    console.log(`üß† Generated query embedding with ${query_embedding.length} dimensions`);

    // 3. –í–∑–µ–º–∏ –≤—Å–∏—á–∫–∏ –±–∏–∑–Ω–µ—Å–∏ —Å embeddings
    let businessesQuery = supabase
      .from('businesses')
      .select('id, name, description, address, city, phone, email, website, category_id, working_hours, custom_fields, verified, rating, review_count, embedding, category:categories(id, name, icon)')
      .not('embedding', 'is', null);

    if (business_name) {
      businessesQuery = businessesQuery.ilike('name', `%${business_name}%`);
    }

    if (category_id) {
      businessesQuery = businessesQuery.eq('category_id', category_id);
    }

    const { data: businesses, error } = await businessesQuery;

    if (error) throw error;

    console.log(`üìä Found ${businesses?.length || 0} businesses with embeddings`);

    if (!businesses || businesses.length === 0) {
      return NextResponse.json({
        query,
        results: [],
        total: 0,
        threshold,
        detected_categories: detectedCategories
      });
    }

    // 4. Pre-filter –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∞–∫–æ —Å–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–∞–Ω–∏)
    let filteredBusinesses = businesses;
    if (detectedCategories.length > 0) {
      filteredBusinesses = businesses.filter(business => 
        shouldIncludeBusiness(business, detectedCategories)
      );
      console.log(`üîç Category filtering: ${filteredBusinesses.length}/${businesses.length} businesses match detected categories`);
    }

    // 5. –ò–∑—á–∏—Å–ª–∏ similarity –∑–∞ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏—Ç–µ –±–∏–∑–Ω–µ—Å–∏
    const results = filteredBusinesses
      .map((business: any) => {
        if (!business.embedding) return null;

        let embedding2: number[];
        
        if (Array.isArray(business.embedding)) {
          embedding2 = business.embedding;
        } else if (typeof business.embedding === 'string') {
          try {
            embedding2 = JSON.parse(business.embedding);
          } catch {
            return null;
          }
        } else {
          return null;
        }

        if (!Array.isArray(embedding2) || embedding2.length !== 384) {
          return null;
        }

        const embedding1: number[] = query_embedding as number[];
        
        const dotProduct = embedding1.reduce((sum, a, i) => sum + (a * embedding2[i]), 0);
        const magnitude1 = Math.sqrt(embedding1.reduce((sum, a) => sum + (a * a), 0));
        const magnitude2 = Math.sqrt(embedding2.reduce((sum, a) => sum + (a * a), 0));
        const similarity = dotProduct / (magnitude1 * magnitude2);
        
        if (isNaN(similarity) || !isFinite(similarity)) return null;

        return {
          ...business,
          similarity,
          similarity_percentage: Math.round(Math.abs(similarity) * 100)
        };
      })
      .filter((business: any) => business && Math.abs(business.similarity) > threshold)
      .sort((a: any, b: any) => Math.abs(b.similarity) - Math.abs(a.similarity))
      .slice(0, limit);

    console.log(`\nüéâ Returning ${results.length} improved results`);

    return NextResponse.json({
      query,
      results,
      total: results.length,
      threshold,
      detected_categories: detectedCategories,
      category_filtering: detectedCategories.length > 0,
      method: 'improved_semantic_search'
    });

  } catch (error: any) {
    console.error('üí• Improved AI Search error:', error);
    
    return NextResponse.json({ 
      error: error.message || 'Unknown error in improved AI search'
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Improved AI Search API',
    features: [
      'Category detection from query',
      'Pre-filtering by detected categories', 
      'Semantic similarity scoring',
      'Improved relevance for business searches'
    ],
    category_keywords: CATEGORY_KEYWORDS
  });
}