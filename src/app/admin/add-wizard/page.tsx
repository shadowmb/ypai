'use client'

import { useState } from 'react'
import { supabase } from '@/lib/supabase'
import Link from 'next/link'

// Category templates (embedded for now)
interface FieldDefinition {
  name: string
  label: string
  type: 'text' | 'textarea' | 'number' | 'select' | 'multi-select' | 'file' | 'json' | 'boolean' | 'time' | 'url'
  required: boolean
  placeholder?: string
  options?: string[]
  description?: string
}

interface CategoryTemplate {
  categoryName: string
  icon: string
  fields: FieldDefinition[]
}

const categoryTemplates: { [key: string]: CategoryTemplate } = {
  '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏': {
    categoryName: '–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏',
    icon: 'üçΩÔ∏è',
    fields: [
      {
        name: 'cuisine_type',
        label: '–¢–∏–ø –∫—É—Ö–Ω—è',
        type: 'select',
        required: true,
        options: ['–ë—ä–ª–≥–∞—Ä—Å–∫–∞', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞', '–ê–∑–∏–∞—Ç—Å–∫–∞', '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞', 'Fast Food', '–ú–æ—Ä—Å–∫–∏ –¥–µ–ª–∏–∫–∞—Ç–µ—Å–∏']
      },
      {
        name: 'price_range',
        label: '–¶–µ–Ω–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è',
        type: 'select',
        required: true,
        options: ['$', '$$', '$$$', '$$$$']
      },
      {
        name: 'delivery',
        label: '–î–æ—Å—Ç–∞–≤–∫–∞',
        type: 'boolean',
        required: false
      },
      {
        name: 'reservation',
        label: '–†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏',
        type: 'boolean',
        required: false
      },
      {
        name: 'menu_url',
        label: '–õ–∏–Ω–∫ –∫—ä–º –º–µ–Ω—é',
        type: 'url',
        required: false,
        placeholder: 'https://example.com/menu.pdf'
      },
      {
        name: 'specialties',
        label: '–°–ø–µ—Ü–∏–∞–ª–∏—Ç–µ—Ç–∏',
        type: 'textarea',
        required: false,
        placeholder: '–ú—É—Å–∞–∫–∞, –ü—ä—Ä–∂–µ–Ω–∫–∞, –†–∏–±–∞ –Ω–∞ —Å–∫–∞—Ä–∞...'
      }
    ]
  },

  '—Ñ—Ä–∏–∑—å–æ—Ä—Å–∫–∏_—Å–∞–ª–æ–Ω–∏': {
    categoryName: '–§—Ä–∏–∑—å–æ—Ä—Å–∫–∏ —Å–∞–ª–æ–Ω–∏',
    icon: '‚úÇÔ∏è',
    fields: [
      {
        name: 'services',
        label: '–£—Å–ª—É–≥–∏',
        type: 'multi-select',
        required: true,
        options: ['–ü–æ–¥—Å—Ç—Ä–∏–≥–≤–∞–Ω–µ –∂–µ–Ω–∏', '–ü–æ–¥—Å—Ç—Ä–∏–≥–≤–∞–Ω–µ –º—ä–∂–µ', '–ë–æ—è–¥–∏—Å–≤–∞–Ω–µ', '–ö—ä–¥—Ä–µ–Ω–µ', '–ò–∑–ø—Ä–∞–≤—è–Ω–µ', '–ú–∞—Å–∫–∏', '–ú–∞—Å–∞–∂']
      },
      {
        name: 'price_list',
        label: '–¶–µ–Ω–æ—Ä–∞–∑–ø–∏—Å',
        type: 'textarea',
        required: false,
        placeholder: '–ü–æ–¥—Å—Ç—Ä–∏–≥–≤–∞–Ω–µ –∂–µ–Ω–∏: 25–ª–≤\n–ë–æ—è–¥–∏—Å–≤–∞–Ω–µ: 45–ª–≤\n–ú–∞—Å–∫–∞: 15–ª–≤'
      },
      {
        name: 'appointment_booking',
        label: '–ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —á–∞—Å',
        type: 'boolean',
        required: false
      },
      {
        name: 'specialists',
        label: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∏',
        type: 'textarea',
        required: false,
        placeholder: '–ú–∞—Ä–∏—è - —Å—Ç–∏–ª–∏—Å—Ç\n–ü–µ—Ç—ä—Ä - –∫–æ–ª–æ—Ä–∏—Å—Ç'
      }
    ]
  },

  '—Ö–æ—Ç–µ–ª–∏': {
    categoryName: '–•–æ—Ç–µ–ª–∏',
    icon: 'üè®',
    fields: [
      {
        name: 'star_rating',
        label: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–≤–µ–∑–¥–∏',
        type: 'select',
        required: true,
        options: ['1 –∑–≤–µ–∑–¥–∞', '2 –∑–≤–µ–∑–¥–∏', '3 –∑–≤–µ–∑–¥–∏', '4 –∑–≤–µ–∑–¥–∏', '5 –∑–≤–µ–∑–¥–∏']
      },
      {
        name: 'room_types',
        label: '–¢–∏–ø–æ–≤–µ —Å—Ç–∞–∏',
        type: 'multi-select',
        required: true,
        options: ['–ï–¥–∏–Ω–∏—á–Ω–∞', '–î–≤–æ–π–Ω–∞', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç', '–õ—É–∫—Å–æ–∑–Ω–∞', '–°–µ–º–µ–π–Ω–∞']
      },
      {
        name: 'amenities',
        label: '–£–¥–æ–±—Å—Ç–≤–∞',
        type: 'multi-select',
        required: false,
        options: ['WiFi', '–ü–∞—Ä–∫–∏–Ω–≥', '–ë–∞—Å–µ–π–Ω', '–§–∏—Ç–Ω–µ—Å', 'SPA', '–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç', '–ö–ª–∏–º–∞—Ç–∏–∫', '–¢–µ–ª–µ–≤–∏–∑–æ—Ä']
      },
      {
        name: 'price_range',
        label: '–¶–µ–Ω–∏ –∑–∞ –Ω–æ—â—É–≤–∫–∞',
        type: 'textarea',
        required: false,
        placeholder: '–ï–¥–∏–Ω–∏—á–Ω–∞: 80–ª–≤\n–î–≤–æ–π–Ω–∞: 120–ª–≤\n–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: 200–ª–≤'
      }
    ]
  },

  '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏–∑–∏': {
    categoryName: '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏–∑–∏',
    icon: 'üöó',
    fields: [
      {
        name: 'services',
        label: '–£—Å–ª—É–≥–∏',
        type: 'multi-select',
        required: true,
        options: ['–°–º—è–Ω–∞ –Ω–∞ –º–∞—Å–ª–æ', '–ì—É–º–∏', '–°–ø–∏—Ä–∞—á–∫–∏', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–ï–ª–µ–∫—Ç—Ä–∏–∫–∞', '–ö–ª–∏–º–∞—Ç–∏–∫', '–ë–æ—è–¥–∂–∏–π—Å–∫–∏ —Ä–∞–±–æ—Ç–∏']
      },
      {
        name: 'car_brands',
        label: '–ú–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏',
        type: 'multi-select',
        required: false,
        options: ['BMW', 'Mercedes', 'Audi', 'VW', 'Opel', 'Ford', 'Toyota', '–í—Å–∏—á–∫–∏ –º–∞—Ä–∫–∏']
      },
      {
        name: 'warranty',
        label: '–ì–∞—Ä–∞–Ω—Ü–∏—è',
        type: 'text',
        required: false,
        placeholder: '6 –º–µ—Å–µ—Ü–∞ –Ω–∞ –∏–∑–≤—ä—Ä—à–µ–Ω–∏ —É—Å–ª—É–≥–∏'
      }
    ]
  },

  '–ª–µ–∫–∞—Ä–∏': {
    categoryName: '–õ–µ–∫–∞—Ä–∏',
    icon: 'üë®‚Äç‚öïÔ∏è',
    fields: [
      {
        name: 'specialty',
        label: '–°–ø–µ—Ü–∏–∞–ª–Ω–æ—Å—Ç',
        type: 'select',
        required: true,
        options: ['–û–±—â–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—â', '–ö–∞—Ä–¥–∏–æ–ª–æ–≥', '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥', '–ì–∏–Ω–µ–∫–æ–ª–æ–≥', '–ü–µ–¥–∏–∞—Ç—ä—Ä', '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '–û—á–µ–Ω –ª–µ–∫–∞—Ä']
      },
      {
        name: 'accepted_insurance',
        label: '–ü—Ä–∏–µ–º–∞–Ω–∏ –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏',
        type: 'multi-select',
        required: false,
        options: ['–ù–ó–û–ö', '–î–ó–ò', '–ë—É–ª—Å—Ç—Ä–∞–¥', '–£–Ω–∏–∫–∞', 'Euroins']
      },
      {
        name: 'consultation_fee',
        label: '–¶–µ–Ω–∞ –Ω–∞ –ø—Ä–µ–≥–ª–µ–¥–∞',
        type: 'text',
        required: false,
        placeholder: '50–ª–≤ (–±–µ–∑ –ù–ó–û–ö), 15–ª–≤ (—Å –ù–ó–û–ö)'
      },
      {
        name: 'appointment_required',
        label: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–≤–∞–Ω–µ',
        type: 'boolean',
        required: false
      }
    ]
  },

  'default': {
    categoryName: '–û–±—â –±–∏–∑–Ω–µ—Å',
    icon: 'üè¢',
    fields: [
      {
        name: 'services',
        label: '–£—Å–ª—É–≥–∏',
        type: 'textarea',
        required: false,
        placeholder: '–û–ø–∏—à–µ—Ç–µ –≤–∞—à–∏—Ç–µ —É—Å–ª—É–≥–∏...'
      }
    ]
  }
}

function getTemplateForCategory(categorySlug: string): CategoryTemplate {
  return categoryTemplates[categorySlug] || categoryTemplates['default']
}

interface WizardStep {
  title: string
  description: string
  component: React.ReactNode
}

export default function SmartBusinessWizard() {
  const [currentStep, setCurrentStep] = useState(0)
  const [selectedCategory, setSelectedCategory] = useState('')
  const [selectedCategoryId, setSelectedCategoryId] = useState<number | null>(null)
  const [loading, setLoading] = useState(false)
  const [businessData, setBusinessData] = useState<any>({
    name: '',
    description: '',
    address: '',
    city: '–ë—É—Ä–≥–∞—Å',
    phone: '',
    email: '',
    website: '',
    working_hours: '',
    custom_fields: {}
  })

  const categories = [
    { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏', slug: '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç–∏', icon: 'üçΩÔ∏è', id: 1 },
    { name: '–§—Ä–∏–∑—å–æ—Ä—Å–∫–∏ —Å–∞–ª–æ–Ω–∏', slug: '—Ñ—Ä–∏–∑—å–æ—Ä—Å–∫–∏_—Å–∞–ª–æ–Ω–∏', icon: '‚úÇÔ∏è', id: 2 },
    { name: '–•–æ—Ç–µ–ª–∏', slug: '—Ö–æ—Ç–µ–ª–∏', icon: 'üè®', id: 3 },
    { name: '–ê–≤—Ç–æ—Å–µ—Ä–≤–∏–∑–∏', slug: '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏–∑–∏', icon: 'üöó', id: 4 },
    { name: '–õ–µ–∫–∞—Ä–∏', slug: '–ª–µ–∫–∞—Ä–∏', icon: 'üë®‚Äç‚öïÔ∏è', id: 5 },
    { name: '–î—Ä—É–≥–∏', slug: 'default', icon: 'üè¢', id: 6 }
  ]

  const renderField = (field: FieldDefinition) => {
    const value = businessData.custom_fields[field.name] || ''
    
    const updateField = (newValue: any) => {
      setBusinessData((prev: any) => ({
        ...prev,
        custom_fields: {
          ...prev.custom_fields,
          [field.name]: newValue
        }
      }))
    }

    switch (field.type) {
      case 'select':
        return (
          <select
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            value={value}
            onChange={(e) => updateField(e.target.value)}
            required={field.required}
          >
            <option value="">–ò–∑–±–µ—Ä–∏ {field.label.toLowerCase()}</option>
            {field.options?.map(option => (
              <option key={option} value={option}>{option}</option>
            ))}
          </select>
        )

      case 'multi-select':
        return (
          <div className="space-y-2">
            {field.options?.map(option => (
              <label key={option} className="flex items-center">
                <input
                  type="checkbox"
                  className="mr-2"
                  checked={Array.isArray(value) && value.includes(option)}
                  onChange={(e) => {
                    const currentArray = Array.isArray(value) ? value : []
                    if (e.target.checked) {
                      updateField([...currentArray, option])
                    } else {
                      updateField(currentArray.filter((item: string) => item !== option))
                    }
                  }}
                />
                {option}
              </label>
            ))}
          </div>
        )

      case 'boolean':
        return (
          <label className="flex items-center">
            <input
              type="checkbox"
              className="mr-2"
              checked={value === true}
              onChange={(e) => updateField(e.target.checked)}
            />
            –î–∞
          </label>
        )

      case 'textarea':
        return (
          <textarea
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            rows={3}
            value={value}
            onChange={(e) => updateField(e.target.value)}
            placeholder={field.placeholder}
            required={field.required}
          />
        )

      case 'number':
        return (
          <input
            type="number"
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            value={value}
            onChange={(e) => updateField(e.target.value)}
            placeholder={field.placeholder}
            required={field.required}
          />
        )

      default: // text, url
        return (
          <input
            type={field.type === 'url' ? 'url' : 'text'}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            value={value}
            onChange={(e) => updateField(e.target.value)}
            placeholder={field.placeholder}
            required={field.required}
          />
        )
    }
  }

  const steps: WizardStep[] = [
    // Step 1: Category Selection
    {
      title: "–ò–∑–±–µ—Ä–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å",
      description: "–ö–∞–∫—ä–≤ —Ç–∏–ø –±–∏–∑–Ω–µ—Å –¥–æ–±–∞–≤—è—Ç–µ?",
      component: (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {categories.map(category => (
            <button
              key={category.slug}
              onClick={() => {
                setSelectedCategory(category.slug)
                setSelectedCategoryId(category.id)
                setBusinessData((prev: any) => ({ ...prev, category: category.name }))
              }}
              className={`p-6 border-2 rounded-lg text-center transition-all ${
                selectedCategory === category.slug
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-200 hover:border-gray-300'
              }`}
            >
              <div className="text-4xl mb-2">{category.icon}</div>
              <div className="font-medium">{category.name}</div>
            </button>
          ))}
        </div>
      )
    },

    // Step 2: Basic Info
    {
      title: "–û—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      description: "–í—ä–≤–µ–¥–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏ –∑–∞ –±–∏–∑–Ω–µ—Å–∞",
      component: (
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">–ò–º–µ –Ω–∞ –±–∏–∑–Ω–µ—Å–∞ *</label>
            <input
              type="text"
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={businessData.name}
              onChange={(e) => setBusinessData((prev: any) => ({ ...prev, name: e.target.value }))}
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</label>
            <textarea
              rows={3}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={businessData.description}
              onChange={(e) => setBusinessData((prev: any) => ({ ...prev, description: e.target.value }))}
              placeholder="–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–∏–∑–Ω–µ—Å–∞..."
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">–†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ</label>
            <textarea
              rows={2}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
              value={businessData.working_hours}
              onChange={(e) => setBusinessData((prev: any) => ({ ...prev, working_hours: e.target.value }))}
              placeholder="–ü–Ω-–ü—Ç: 09:00-17:00&#10;–°–±: 09:00-13:00"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–ê–¥—Ä–µ—Å</label>
              <input
                type="text"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                value={businessData.address}
                onChange={(e) => setBusinessData((prev: any) => ({ ...prev, address: e.target.value }))}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                type="tel"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
                value={businessData.phone}
                onChange={(e) => setBusinessData((prev: any) => ({ ...prev, phone: e.target.value }))}
              />
            </div>
          </div>
        </div>
      )
    },

    // Step 3: Category-specific fields
    {
      title: "–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      description: `–î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∏ –¥–∞–Ω–Ω–∏ –∑–∞ ${selectedCategory ? getTemplateForCategory(selectedCategory).categoryName.toLowerCase() : '–±–∏–∑–Ω–µ—Å–∞'}`,
      component: selectedCategory ? (
        <div className="space-y-6">
          {getTemplateForCategory(selectedCategory).fields.map(field => (
            <div key={field.name}>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                {field.label} {field.required && '*'}
              </label>
              {renderField(field)}
              {field.description && (
                <p className="text-sm text-gray-500 mt-1">{field.description}</p>
              )}
            </div>
          ))}
        </div>
      ) : <div>–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—ä—Ä–≤–æ.</div>
    },

    // Step 4: Review
    {
      title: "–ü—Ä–µ–≥–ª–µ–¥ –∏ –ø–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ",
      description: "–ü—Ä–µ–≥–ª–µ–¥–∞–π—Ç–µ –¥–∞–Ω–Ω–∏—Ç–µ –ø—Ä–µ–¥–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ",
      component: (
        <div className="space-y-4">
          <div className="bg-gray-50 p-4 rounded-lg">
            <h3 className="font-medium text-gray-900 mb-2">–û—Å–Ω–æ–≤–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
            <p><strong>–ò–º–µ:</strong> {businessData.name}</p>
            <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {businessData.category}</p>
            <p><strong>–ê–¥—Ä–µ—Å:</strong> {businessData.address}</p>
            <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {businessData.phone}</p>
            <p><strong>–†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ:</strong> {businessData.working_hours}</p>
          </div>

          {Object.keys(businessData.custom_fields).length > 0 && (
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="font-medium text-gray-900 mb-2">–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
              {Object.entries(businessData.custom_fields).map(([key, value]) => (
                <p key={key}>
                  <strong>{key}:</strong> {Array.isArray(value) ? value.join(', ') : String(value)}
                </p>
              ))}
            </div>
          )}
        </div>
      )
    }
  ]

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  const saveBusiness = async () => {
    if (!selectedCategoryId) {
      alert('–ú–æ–ª—è, –∏–∑–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è!')
      return
    }

    setLoading(true)
    try {
      const { error } = await supabase
        .from('businesses')
        .insert({
          name: businessData.name,
          description: businessData.description || null,
          address: businessData.address || null,
          city: businessData.city || '–ë—É—Ä–≥–∞—Å',
          phone: businessData.phone || null,
          email: businessData.email || null,
          website: businessData.website || null,
          working_hours: businessData.working_hours || null,
          category_id: selectedCategoryId,
          custom_fields: businessData.custom_fields,
          rating: 0,
          review_count: 0,
          verified: false
        })

      if (error) {
        alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∞–∑–≤–∞–Ω–µ: ' + error.message)
      } else {
        alert('–ë–∏–∑–Ω–µ—Å—ä—Ç –µ –∑–∞–ø–∞–∑–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        // Reset form
        setCurrentStep(0)
        setSelectedCategory('')
        setSelectedCategoryId(null)
        setBusinessData({
          name: '',
          description: '',
          address: '',
          city: '–ë—É—Ä–≥–∞—Å',
          phone: '',
          email: '',
          website: '',
          working_hours: '',
          custom_fields: {}
        })
      }
    } catch (err) {
      alert('–ì—Ä–µ—à–∫–∞: ' + err)
    }
    setLoading(false)
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-4xl mx-auto p-6">
        {/* Header */}
        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold text-gray-900 mb-2">üßô‚Äç‚ôÇÔ∏è Smart Business Wizard</h1>
              <p className="text-gray-600">–ò–Ω—Ç–µ–ª–∏–≥–µ–Ω—Ç–Ω–æ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –±–∏–∑–Ω–µ—Å —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –ø–æ–ª–µ—Ç–∞</p>
            </div>
            <Link
              href="/admin"
              className="bg-indigo-600 hover:bg-indigo-700 text-white px-6 py-3 rounded-lg transition-colors"
            >
              ‚Üê Back to Admin
            </Link>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm font-medium text-gray-700">
              –°—Ç—ä–ø–∫–∞ {currentStep + 1} –æ—Ç {steps.length}
            </span>
            <span className="text-sm text-gray-500">
              {Math.round(((currentStep + 1) / steps.length) * 100)}%
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}
            />
          </div>
        </div>

        {/* Current Step */}
        <div className="bg-white rounded-xl shadow-lg p-8">
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              {steps[currentStep].title}
            </h1>
            <p className="text-gray-600">
              {steps[currentStep].description}
            </p>
          </div>

          <div className="mb-8">
            {steps[currentStep].component}
          </div>

          {/* Navigation */}
          <div className="flex justify-between">
            <button
              onClick={prevStep}
              disabled={currentStep === 0}
              className={`px-6 py-2 rounded-lg ${
                currentStep === 0
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-gray-500 text-white hover:bg-gray-600'
              }`}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>

            {currentStep === steps.length - 1 ? (
              <button
                onClick={saveBusiness}
                disabled={loading}
                className={`px-8 py-2 rounded-lg ${
                  loading
                    ? 'bg-gray-400 text-gray-500 cursor-not-allowed'
                    : 'bg-green-600 text-white hover:bg-green-700'
                }`}
              >
                {loading ? '–ó–∞–ø–∞–∑–≤–∞–Ω–µ...' : 'üíæ –ó–∞–ø–∞–∑–∏ –±–∏–∑–Ω–µ—Å–∞'}
              </button>
            ) : (
              <button
                onClick={nextStep}
                disabled={currentStep === 0 && !selectedCategory}
                className={`px-6 py-2 rounded-lg ${
                  (currentStep === 0 && !selectedCategory)
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}
              >
                –ù–∞–ø—Ä–µ–¥ ‚Üí
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}