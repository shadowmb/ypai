// src/app/test-ai/page.tsx - –¢–µ—Å—Ç–æ–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞ AI Search
'use client';

import { useState } from 'react';

export default function TestAIPage() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState<any>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const [embeddings, setEmbeddings] = useState<any>(null);

  const testAPIConnection = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/ai-search-simple');
      const data = await response.json();
      
      setResults(data);
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const generateEmbeddings = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/generate-embeddings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({}),
      });

      const data = await response.json();
      
      if (response.ok) {
        setEmbeddings(data);
      } else {
        setError(data.error || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ embeddings');
      }
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const testAISearch = async () => {
    if (!query.trim()) return;
    
    try {
      setLoading(true);
      setError(null);
      
      const response = await fetch('/api/ai-search-simple', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: query.trim(),
          threshold: 0.5, // –ü–æ-–Ω–∏—Å—ä–∫ –ø—Ä–∞–≥ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ
          limit: 5
        }),
      });

      const data = await response.json();
      
      if (response.ok) {
        setResults(data);
      } else {
        setError(data.error || 'API –≥—Ä–µ—à–∫–∞');
      }
    } catch (err: any) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h1 className="text-2xl font-bold text-gray-900 mb-6">
            üß™ AI Search Test Page
          </h1>

          {/* API Connection Test */}
          <div className="mb-8">
            <h2 className="text-lg font-semibold text-gray-800 mb-3">
              1. –¢–µ—Å—Ç –Ω–∞ API –≤—Ä—ä–∑–∫–∞
            </h2>
            <button
              onClick={testAPIConnection}
              disabled={loading}
              className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:opacity-50"
            >
              {loading ? '‚ü≥ –¢–µ—Å—Ç–≤–∞–Ω–µ...' : 'üîó –¢–µ—Å—Ç–≤–∞–π API –≤—Ä—ä–∑–∫–∞'}
            </button>
          </div>

          {/* Generate Embeddings */}
          <div className="mb-8">
            <h2 className="text-lg font-semibold text-gray-800 mb-3">
              2. –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ embeddings
            </h2>
            <button
              onClick={generateEmbeddings}
              disabled={loading}
              className="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 disabled:opacity-50 mr-3"
            >
              {loading ? '‚ü≥ –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ...' : 'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–∞–π embeddings'}
            </button>
            <p className="text-sm text-gray-600 mt-2">
              –¢–æ–≤–∞ —â–µ –≥–µ–Ω–µ—Ä–∏—Ä–∞ AI embeddings –∑–∞ –≤—Å–∏—á–∫–∏ –±–∏–∑–Ω–µ—Å–∏ –≤ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
            </p>
          </div>

          {/* AI Search Test */}
          <div className="mb-8">
            <h2 className="text-lg font-semibold text-gray-800 mb-3">
              3. –¢–µ—Å—Ç –Ω–∞ AI Search
            </h2>
            <div className="flex gap-3 mb-4">
              <input
                type="text"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="–í—ä–≤–µ–¥–µ—Ç–µ —Ç–µ—Å—Ç–æ–≤–∞ –∑–∞—è–≤–∫–∞ (–Ω–∞–ø—Ä: '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç')"
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                onKeyPress={(e) => e.key === 'Enter' && testAISearch()}
              />
              <button
                onClick={testAISearch}
                disabled={loading || !query.trim()}
                className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 disabled:opacity-50"
              >
                {loading ? '‚ü≥ –¢—ä—Ä—Å–∏...' : 'üîç AI –¢—ä—Ä—Å–µ–Ω–µ'}
              </button>
            </div>

            {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–Ω–æ –∑–∞–¥–∞–¥–µ–Ω–∏ —Ç–µ—Å—Ç–æ–≤–µ */}
            <div className="flex flex-wrap gap-2 mb-4">
              <button
                onClick={() => { setQuery('—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –º–æ—Ä—Å–∫–∞ —Ö—Ä–∞–Ω–∞'); }}
                className="bg-gray-200 text-gray-700 px-3 py-1 rounded text-sm hover:bg-gray-300"
              >
                üçΩÔ∏è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç –º–æ—Ä—Å–∫–∞ —Ö—Ä–∞–Ω–∞
              </button>
              <button
                onClick={() => { setQuery('—Ñ—Ä–∏–∑—å–æ—Ä –≤ —Ü–µ–Ω—Ç—ä—Ä–∞'); }}
                className="bg-gray-200 text-gray-700 px-3 py-1 rounded text-sm hover:bg-gray-300"
              >
                ‚úÇÔ∏è —Ñ—Ä–∏–∑—å–æ—Ä –≤ —Ü–µ–Ω—Ç—ä—Ä–∞
              </button>
              <button
                onClick={() => { setQuery('–∞–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ BMW'); }}
                className="bg-gray-200 text-gray-700 px-3 py-1 rounded text-sm hover:bg-gray-300"
              >
                üöó –∞–≤—Ç–æ—Å–µ—Ä–≤–∏–∑ BMW
              </button>
              <button
                onClick={() => { setQuery('—Ö–æ—Ç–µ–ª –º–æ—Ä–µ –±—É—Ä–≥–∞—Å'); }}
                className="bg-gray-200 text-gray-700 px-3 py-1 rounded text-sm hover:bg-gray-300"
              >
                üè® —Ö–æ—Ç–µ–ª –º–æ—Ä–µ –±—É—Ä–≥–∞—Å
              </button>
            </div>
          </div>

          {/* Loading */}
          {loading && (
            <div className="text-center py-4">
              <div className="text-2xl animate-spin mx-auto text-blue-500 mb-2">‚ü≥</div>
              <p className="text-gray-600">–û–±—Ä–∞–±–æ—Ç–∫–∞...</p>
            </div>
          )}

          {/* Error */}
          {error && (
            <div className="bg-red-50 border border-red-200 rounded-md p-4 mb-6">
              <h3 className="text-red-800 font-semibold mb-2">‚ùå –ì—Ä–µ—à–∫–∞:</h3>
              <p className="text-red-700">{error}</p>
            </div>
          )}

          {/* Embeddings Results */}
          {embeddings && !loading && (
            <div className="bg-green-50 border border-green-200 rounded-md p-4 mb-6">
              <h3 className="text-green-800 font-semibold mb-2">ü§ñ Embeddings –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–∏:</h3>
              <div className="text-green-700 text-sm">
                <p>‚úÖ –û–±—Ä–∞–±–æ—Ç–µ–Ω–∏: {embeddings.processed}</p>
                <p>‚ùå –ì—Ä–µ—à–∫–∏: {embeddings.errors}</p>
                <p>üìä –û–±—â–æ —Å embeddings: {embeddings.total_with_embeddings}</p>
              </div>
            </div>
          )}

          {/* Results */}
          {results && !loading && (
            <div className="bg-gray-50 border border-gray-200 rounded-md p-4">
              <h3 className="text-gray-800 font-semibold mb-3">üìä –†–µ–∑—É–ª—Ç–∞—Ç–∏:</h3>
              <pre className="bg-white p-3 rounded border text-sm overflow-auto max-h-96">
                {JSON.stringify(results, null, 2)}
              </pre>
              
              {/* Readable results */}
              {results.results && results.results.length > 0 && (
                <div className="mt-4">
                  <h4 className="font-semibold text-gray-800 mb-2">
                    üéØ –ù–∞–º–µ—Ä–µ–Ω–∏ {results.results.length} —Ä–µ–∑—É–ª—Ç–∞—Ç–∞:
                  </h4>
                  <div className="space-y-2">
                    {results.results.map((business: any, index: number) => (
                      <div key={business.id || index} className="bg-white p-3 rounded border">
                        <div className="flex justify-between items-start">
                          <div>
                            <h5 className="font-medium text-gray-900">
                              {business.name}
                              {business.verified && (
                                <span className="ml-2 bg-green-100 text-green-800 text-xs px-2 py-1 rounded">
                                  ‚úÖ Verified
                                </span>
                              )}
                            </h5>
                            <p className="text-gray-600 text-sm">{business.description}</p>
                            <p className="text-gray-500 text-xs">üìç {business.address}</p>
                          </div>
                          {business.similarity_percentage && (
                            <div className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                              {business.similarity_percentage}% match
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Instructions */}
        <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
          <h3 className="text-blue-800 font-semibold mb-2">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
          <ol className="text-blue-700 text-sm space-y-1 list-decimal list-inside">
            <li>–ü—ä—Ä–≤–æ —Ç–µ—Å—Ç–≤–∞–π—Ç–µ API –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å –±—É—Ç–æ–Ω–∞ "–¢–µ—Å—Ç–≤–∞–π API –≤—Ä—ä–∑–∫–∞"</li>
            <li>–ê–∫–æ API-—Ç–æ —Ä–∞–±–æ—Ç–∏, –æ–ø–∏—Ç–∞–π—Ç–µ AI —Ç—ä—Ä—Å–µ–Ω–µ —Å –ø—Ä–∏–º–µ—Ä–Ω–∏—Ç–µ –∑–∞—è–≤–∫–∏</li>
            <li>–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞ –Ω–∞ –±—Ä–∞—É–∑—ä—Ä–∞ –∑–∞ –ø–æ–≤–µ—á–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</li>
            <li>–ê–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∏, —Å–ø–æ–¥–µ–ª–µ—Ç–µ –≥–∏ –∑–∞ –∞–Ω–∞–ª–∏–∑</li>
          </ol>
        </div>
      </div>
    </div>
  );
}